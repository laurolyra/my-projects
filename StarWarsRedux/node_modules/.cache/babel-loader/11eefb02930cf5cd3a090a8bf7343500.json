{"ast":null,"code":"import swAPI from '../services/swAPI';\nexport const GET_PLANETS = 'GET_PLANETS';\nexport const GET_PLANETS_SUCCESS = 'GET_PLANETS_SUCCESS';\nexport const GET_PLANETS_FAILURE = 'GET_PLANETS_FAILURE';\nexport const FILTER_TEXT = 'FILTER_TEXT';\nexport const getPlanets = () => ({\n  type: GET_PLANETS,\n  loading: true\n});\nexport const getPlanetsSuccess = data => ({\n  type: GET_PLANETS_SUCCESS,\n  loading: false,\n  data\n});\nexport const getPlanetsFailure = error => ({\n  type: GET_PLANETS_FAILURE,\n  loading: false,\n  error\n});\nexport const filterText = (name, data) => ({\n  type: FILTER_TEXT,\n  name,\n  results: data.some(planet => planet.name.toLowerCase().includes(name)) ? data.filter(planet => planet.name.toLowerCase().includes(name)) : null\n});\nexport function thunkPlanets() {\n  return dispatch => {\n    dispatch(getPlanets());\n    return swAPI().then(planet => dispatch(getPlanetsSuccess(planet)), error => dispatch(getPlanetsFailure(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/lauro/MeusProjetos/my-projects/StarWarsRedux/src/actions/APIactions.js"],"names":["swAPI","GET_PLANETS","GET_PLANETS_SUCCESS","GET_PLANETS_FAILURE","FILTER_TEXT","getPlanets","type","loading","getPlanetsSuccess","data","getPlanetsFailure","error","filterText","name","results","some","planet","toLowerCase","includes","filter","thunkPlanets","dispatch","then","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,UAAU,GAAG,OACxB;AAAEC,EAAAA,IAAI,EAAEL,WAAR;AAAqBM,EAAAA,OAAO,EAAE;AAA9B,CADwB,CAAnB;AAIP,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,KAC/B;AAAEH,EAAAA,IAAI,EAAEJ,mBAAR;AAA6BK,EAAAA,OAAO,EAAE,KAAtC;AAA6CE,EAAAA;AAA7C,CAD+B,CAA1B;AAIP,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,KAC/B;AAAEL,EAAAA,IAAI,EAAEH,mBAAR;AAA6BI,EAAAA,OAAO,EAAE,KAAtC;AAA6CI,EAAAA;AAA7C,CAD+B,CAA1B;AAIP,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOJ,IAAP,MACxB;AACEH,EAAAA,IAAI,EAAEF,WADR;AAEES,EAAAA,IAFF;AAGEC,EAAAA,OAAO,EAAEL,IAAI,CAACM,IAAL,CAAWC,MAAD,IAAYA,MAAM,CAACH,IAAP,CAAYI,WAAZ,GAA0BC,QAA1B,CAAmCL,IAAnC,CAAtB,IACLJ,IAAI,CAACU,MAAL,CAAaH,MAAD,IAAYA,MAAM,CAACH,IAAP,CAAYI,WAAZ,GAA0BC,QAA1B,CAAmCL,IAAnC,CAAxB,CADK,GAEL;AALN,CADwB,CAAnB;AAUP,OAAO,SAASO,YAAT,GAAwB;AAC7B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;AACA,WAAOL,KAAK,GACTsB,IADI,CAEFN,MAAD,IAAYK,QAAQ,CAACb,iBAAiB,CAACQ,MAAD,CAAlB,CAFjB,EAGFL,KAAD,IAAWU,QAAQ,CAACX,iBAAiB,CAACC,KAAK,CAACY,OAAP,CAAlB,CAHhB,CAAP;AAKD,GAPD;AAQD","sourcesContent":["import swAPI from '../services/swAPI';\n\nexport const GET_PLANETS = 'GET_PLANETS';\nexport const GET_PLANETS_SUCCESS = 'GET_PLANETS_SUCCESS';\nexport const GET_PLANETS_FAILURE = 'GET_PLANETS_FAILURE';\nexport const FILTER_TEXT = 'FILTER_TEXT';\n\nexport const getPlanets = () => (\n  { type: GET_PLANETS, loading: true }\n);\n\nexport const getPlanetsSuccess = (data) => (\n  { type: GET_PLANETS_SUCCESS, loading: false, data }\n);\n\nexport const getPlanetsFailure = (error) => (\n  { type: GET_PLANETS_FAILURE, loading: false, error }\n);\n\nexport const filterText = (name, data) => (\n  {\n    type: FILTER_TEXT,\n    name,\n    results: data.some((planet) => planet.name.toLowerCase().includes(name))\n      ? data.filter((planet) => planet.name.toLowerCase().includes(name))\n      : null,\n  }\n);\n\nexport function thunkPlanets() {\n  return (dispatch) => {\n    dispatch(getPlanets());\n    return swAPI()\n      .then(\n        (planet) => dispatch(getPlanetsSuccess(planet)),\n        (error) => dispatch(getPlanetsFailure(error.message)),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}