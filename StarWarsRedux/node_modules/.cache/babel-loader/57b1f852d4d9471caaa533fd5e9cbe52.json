{"ast":null,"code":"import _objectSpread from \"/home/lauro/MeusProjetos/my-projects/StarWarsRedux/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_PLANETS, GET_PLANETS_SUCCESS, GET_PLANETS_FAILURE } from '../actions/APIactions';\nconst initialState = {\n  loading: true\n};\n\nconst APIreducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PLANETS:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_PLANETS_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        data: action.data.results.sort((a, b) => a.name > b.name ? 1 : -1)\n      });\n\n    case GET_PLANETS_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default APIreducer;","map":{"version":3,"sources":["/home/lauro/MeusProjetos/my-projects/StarWarsRedux/src/reducers/APIreducer.js"],"names":["GET_PLANETS","GET_PLANETS_SUCCESS","GET_PLANETS_FAILURE","initialState","loading","APIreducer","state","action","type","data","results","sort","a","b","name","error"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,mBAAtB,EAA2CC,mBAA3C,QAAsE,uBAAtE;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKH,mBAAL;AACE,+BACKK,KADL;AAEEF,QAAAA,OAAO,EAAE,KAFX;AAGEK,QAAAA,IAAI,EAAEF,MAAM,CAACE,IAAP,CAAYC,OAAZ,CAAoBC,IAApB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA3D;AAHR;;AAKF,SAAKZ,mBAAL;AACE,+BACKI,KADL;AAEEF,QAAAA,OAAO,EAAE,KAFX;AAGEW,QAAAA,KAAK,EAAER,MAAM,CAACQ;AAHhB;;AAKF;AAAS,aAAOT,KAAP;AAlBX;AAoBD,CArBD;;AAuBA,eAAeD,UAAf","sourcesContent":["import { GET_PLANETS, GET_PLANETS_SUCCESS, GET_PLANETS_FAILURE } from '../actions/APIactions';\n\nconst initialState = {\n  loading: true,\n};\n\nconst APIreducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PLANETS:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_PLANETS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: action.data.results.sort((a, b) => (a.name > b.name ? 1 : -1)),\n      };\n    case GET_PLANETS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    default: return state;\n  }\n};\n\nexport default APIreducer;\n"]},"metadata":{},"sourceType":"module"}