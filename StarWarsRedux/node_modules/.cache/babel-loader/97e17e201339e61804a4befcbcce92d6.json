{"ast":null,"code":"import _objectSpread from \"/home/lauro/MeusProjetos/my-projects/StarWarsRedux/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/lauro/MeusProjetos/my-projects/StarWarsRedux/src/components/Dropdowns.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { generateFilter } from '../actions/dropdownActions';\n\nclass Dropdowns extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newNumericValues: {\n        numericValues: {\n          column: '',\n          comparison: '',\n          value: ''\n        }\n      }\n    };\n    this.storeFilters = this.storeFilters.bind(this);\n    this.setColumnsState = this.setColumnsState.bind(this);\n    this.setValueState = this.setValueState.bind(this);\n  }\n\n  setColumnsState(e) {\n    const newNumericValues = this.state.newNumericValues;\n    this.setState({\n      newNumericValues: _objectSpread({}, newNumericValues, {\n        numericValues: _objectSpread({}, newNumericValues.numericValues, {\n          column: e.target.value\n        })\n      })\n    });\n  }\n\n  setComparisonState(e) {\n    const newNumericValues = this.state.newNumericValues;\n    this.setState({\n      newNumericValues: _objectSpread({}, newNumericValues, {\n        numericValues: _objectSpread({}, newNumericValues.numericValues, {\n          comparison: e.target.value\n        })\n      })\n    });\n  }\n\n  setValueState(e) {\n    const newNumericValues = this.state.newNumericValues;\n    this.setState({\n      newNumericValues: _objectSpread({}, newNumericValues, {\n        numericValues: _objectSpread({}, newNumericValues.numericValues, {\n          value: e.target.value\n        })\n      })\n    });\n  }\n\n  generateColumns(arr) {\n    const columns = this.props.columns;\n\n    if (columns.length !== 0) {\n      return React.createElement(\"select\", {\n        onClick: e => this.setColumnsState(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Select Column\"), arr.map(option => React.createElement(\"option\", {\n        key: option,\n        name: \"column\",\n        value: option,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, option)));\n    }\n\n    return null;\n  }\n\n  generateComparison() {\n    const comparison = ['more than', 'equal to', 'less than'];\n    const columns = this.props.columns;\n\n    if (columns.length !== 0) {\n      return React.createElement(\"select\", {\n        onChange: e => this.setComparisonState(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Select Comparison\"), comparison.map(option => React.createElement(\"option\", {\n        key: option,\n        value: option,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, option)));\n    }\n\n    return null;\n  }\n\n  storeFilters() {\n    const _this$props = this.props,\n          actionStoreFilters = _this$props.actionStoreFilters,\n          columns = _this$props.columns;\n    const newNumericValues = this.state.newNumericValues;\n    return columns.length > 0 && actionStoreFilters(newNumericValues);\n  }\n\n  render() {\n    const columns = this.props.columns;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.generateColumns(columns), this.generateComparison(), columns.length !== 0 ? React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"type a number here!\",\n      onChange: e => this.setValueState(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"No more filters available!\"), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.storeFilters(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Filter!\"));\n  }\n\n}\n\nconst mapStateToProps = ({\n  dropdownReducer: {\n    columns,\n    column,\n    comparison,\n    value\n  }\n}) => ({\n  columns,\n  column,\n  comparison,\n  value\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actionStoreFilters: newNumericValues => dispatch(generateFilter(newNumericValues))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdowns);\nDropdowns.propTypes = {\n  columns: propTypes.arrayOf(propTypes.string).isRequired,\n  actionStoreFilters: propTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/lauro/MeusProjetos/my-projects/StarWarsRedux/src/components/Dropdowns.js"],"names":["React","connect","propTypes","generateFilter","Dropdowns","Component","constructor","props","state","newNumericValues","numericValues","column","comparison","value","storeFilters","bind","setColumnsState","setValueState","e","setState","target","setComparisonState","generateColumns","arr","columns","length","map","option","generateComparison","actionStoreFilters","render","mapStateToProps","dropdownReducer","mapDispatchToProps","dispatch","arrayOf","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { generateFilter } from '../actions/dropdownActions';\n\nclass Dropdowns extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newNumericValues: {\n        numericValues: {\n          column: '',\n          comparison: '',\n          value: '',\n        },\n      },\n    };\n    this.storeFilters = this.storeFilters.bind(this);\n    this.setColumnsState = this.setColumnsState.bind(this);\n    this.setValueState = this.setValueState.bind(this);\n  }\n\n  setColumnsState(e) {\n    const { newNumericValues } = this.state;\n    this.setState({\n      newNumericValues: {\n        ...newNumericValues,\n        numericValues: {\n          ...newNumericValues.numericValues,\n          column: e.target.value,\n        },\n      },\n    });\n  }\n\n  setComparisonState(e) {\n    const { newNumericValues } = this.state;\n    this.setState({\n      newNumericValues: {\n        ...newNumericValues,\n        numericValues: {\n          ...newNumericValues.numericValues,\n          comparison: e.target.value,\n        },\n      },\n    });\n  }\n\n  setValueState(e) {\n    const { newNumericValues } = this.state;\n    this.setState({\n      newNumericValues: {\n        ...newNumericValues,\n        numericValues: {\n          ...newNumericValues.numericValues,\n          value: e.target.value,\n        },\n      },\n    });\n  }\n\n  generateColumns(arr) {\n    const { columns } = this.props;\n    if (columns.length !== 0) {\n      return (\n        <select onClick={(e) => this.setColumnsState(e)}>\n          <option>Select Column</option>\n          {arr.map((option) => <option key={option} name=\"column\" value={option}>{option}</option>)}\n        </select>\n      );\n    }\n    return null;\n  }\n\n  generateComparison() {\n    const comparison = ['more than', 'equal to', 'less than'];\n    const { columns } = this.props;\n    if (columns.length !== 0) {\n      return (\n        <select onChange={(e) => this.setComparisonState(e)}>\n          <option value=\"\">Select Comparison</option>\n          {comparison.map((option) => <option key={option} value={option}>{option}</option>)}\n        </select>\n      );\n    }\n    return null;\n  }\n\n  storeFilters() {\n    const { actionStoreFilters, columns } = this.props;\n    const { newNumericValues } = this.state;\n    return columns.length > 0 && actionStoreFilters(newNumericValues);\n  }\n\n  render() {\n    const {\n      columns,\n    } = this.props;\n    return (\n      <div>\n        {this.generateColumns(columns)}\n        {this.generateComparison()}\n        {columns.length !== 0\n          ? (\n            <input\n              type=\"number\"\n              placeholder=\"type a number here!\"\n              onChange={(e) => this.setValueState(e)}\n            />\n          )\n          : <div>No more filters available!</div>}\n        <button type=\"button\" onClick={() => this.storeFilters()}>Filter!</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  dropdownReducer: {\n    columns,\n    column,\n    comparison,\n    value,\n  },\n}) => ({\n  columns,\n  column,\n  comparison,\n  value,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actionStoreFilters: (newNumericValues) => dispatch(generateFilter(newNumericValues)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdowns);\n\nDropdowns.propTypes = {\n  columns: propTypes.arrayOf(propTypes.string).isRequired,\n  actionStoreFilters: propTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}